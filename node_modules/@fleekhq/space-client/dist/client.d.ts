import grpcWeb, { ClientReadableStream } from 'grpc-web';
import { SpaceApiClient } from './definitions/SpaceServiceClientPb';
import { OpenFilePayload, CreateBucketPayload, AddItemsPayload, CreateFolderPayload, GetIdentityByUsernamePayload, CreateUsernameAndEmailPayload, ShareBucketViaEmailPayload, ShareBucketViaIdentityPayload, GenerateFileShareLinkPayload, BackupKeysByPassphrasePayload, RecoverKeysByPassphrasePayload, ToggleFusePayload, GetFuseDriveStatusPayload, ListDirectoriesPayload, ListDirectoryPayload, ShareBucketPayload, JoinBucketPayload } from './types';
import { TextileEventResponse, ListDirectoriesResponse, OpenFileResponse, CreateBucketResponse, AddItemsResponse, CreateFolderResponse, GetIdentityByUsernameResponse, CreateUsernameAndEmailResponse, ShareBucketViaEmailResponse, ShareBucketViaIdentityResponse, GenerateFileShareLinkResponse, BackupKeysByPassphraseResponse, RecoverKeysByPassphraseResponse, FuseDriveResponse, FileEventResponse, ListBucketsResponse, ListDirectoryResponse, ShareBucketResponse, JoinBucketResponse } from './definitions/space_pb';
export interface SpaceClientOpts {
    url: string;
    defaultBucket?: string;
    options?: SpaceApiClient['options_'];
    credentials?: SpaceApiClient['credentials_'];
}
declare class SpaceClient {
    defaultBucket: string;
    instance: SpaceApiClient;
    constructor(opts: SpaceClientOpts);
    listDirectory(payload: ListDirectoryPayload, metadata?: grpcWeb.Metadata): Promise<ListDirectoryResponse>;
    listDirectories(payload: ListDirectoriesPayload, metadata?: grpcWeb.Metadata): Promise<ListDirectoriesResponse>;
    txlSubscribe(metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<TextileEventResponse>;
    openFile(payload: OpenFilePayload, metadata?: grpcWeb.Metadata): Promise<OpenFileResponse>;
    createBucket(payload: CreateBucketPayload, metadata?: grpcWeb.Metadata): Promise<CreateBucketResponse>;
    addItems(payload: AddItemsPayload, metadata?: grpcWeb.Metadata): ClientReadableStream<AddItemsResponse>;
    createFolder(payload: CreateFolderPayload, metadata?: grpcWeb.Metadata): Promise<CreateFolderResponse>;
    createUsernameAndEmail(payload: CreateUsernameAndEmailPayload, metadata?: grpcWeb.Metadata): Promise<CreateUsernameAndEmailResponse>;
    getIdentityByUsername(payload: GetIdentityByUsernamePayload, metadata?: grpcWeb.Metadata): Promise<GetIdentityByUsernameResponse>;
    /**
     * [WIP] shareBucketViaEmail
     *
     * Not supported by space daemon
     */
    shareBucketViaEmail(payload: ShareBucketViaEmailPayload, metadata?: grpcWeb.Metadata): Promise<ShareBucketViaEmailResponse>;
    shareBucketViaIdentity(payload: ShareBucketViaIdentityPayload, metadata?: grpcWeb.Metadata): Promise<ShareBucketViaIdentityResponse>;
    /**
     * [WIP] generateFileShareLink
     *
     * Not supported by space daemon
     */
    generateFileShareLink(payload: GenerateFileShareLinkPayload, metadata?: grpcWeb.Metadata): Promise<GenerateFileShareLinkResponse>;
    /**
     * [WIP] backupKeysByPassphrase
     *
     * Not supported by space daemon
     */
    backupKeysByPassphrase(payload: BackupKeysByPassphrasePayload, metadata?: grpcWeb.Metadata): Promise<BackupKeysByPassphraseResponse>;
    /**
     * [WIP] recoverKeysByPassphrase
     *
     * Not supported by space daemon
     */
    recoverKeysByPassphrase(payload: RecoverKeysByPassphrasePayload, metadata?: grpcWeb.Metadata): Promise<RecoverKeysByPassphraseResponse>;
    /**
     * [WIP] toggleFuseDrive
     *
     * Not supported by space daemon
     */
    toggleFuseDrive(payload: ToggleFusePayload, metadata?: grpcWeb.Metadata): Promise<FuseDriveResponse>;
    /**
     * [WIP] getFuseDriveStatus
     *
     * Not supported by space daemon
     */
    getFuseDriveStatus(payload: GetFuseDriveStatusPayload, metadata?: grpcWeb.Metadata): Promise<FuseDriveResponse>;
    subscribe(metadata?: grpcWeb.Metadata): grpcWeb.ClientReadableStream<FileEventResponse>;
    /**
     * [WIP] listBuckets
     *
     * Not supported by space daemon
     */
    listBuckets(metadata?: grpcWeb.Metadata): Promise<ListBucketsResponse>;
    shareBucket(payload: ShareBucketPayload, metadata?: grpcWeb.Metadata): Promise<ShareBucketResponse>;
    joinBucket(payload: JoinBucketPayload, metadata?: grpcWeb.Metadata): Promise<JoinBucketResponse>;
}
export default SpaceClient;
