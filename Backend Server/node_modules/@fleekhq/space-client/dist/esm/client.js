import { Empty } from 'google-protobuf/google/protobuf/empty_pb';
import { SpaceApiClient } from './definitions/SpaceServiceClientPb';
import { ListDirectoriesRequest, OpenFileRequest, CreateBucketRequest, AddItemsRequest, CreateFolderRequest, GetIdentityByUsernameRequest, CreateUsernameAndEmailRequest, ShareBucketViaEmailRequest, ShareBucketViaIdentityRequest, GenerateFileShareLinkRequest, BackupKeysByPassphraseRequest, RecoverKeysByPassphraseRequest, ToggleFuseRequest, IdentityType, ListBucketsRequest, ListDirectoryRequest, ShareBucketRequest, JoinBucketRequest, ThreadInfo, } from './definitions/space_pb';
var DEFAULT_BUCKET = 'personal';
var SpaceClient = /** @class */ (function () {
    function SpaceClient(opts) {
        var url = opts.url, options = opts.options, credentials = opts.credentials, _a = opts.defaultBucket, defaultBucket = _a === void 0 ? DEFAULT_BUCKET : _a;
        this.defaultBucket = defaultBucket;
        this.instance = new SpaceApiClient(url, credentials, options);
    }
    SpaceClient.prototype.listDirectory = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new ListDirectoryRequest();
            var path = payload.path.replace(/^\//, '');
            var bucket = payload.bucket === '' ? null : payload.bucket;
            request.setPath(path);
            request.setBucket(bucket || _this.defaultBucket);
            _this.instance.listDirectory(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.listDirectories = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new ListDirectoriesRequest();
            var bucket = payload.bucket === '' ? null : payload.bucket;
            request.setBucket(bucket || _this.defaultBucket);
            _this.instance.listDirectories(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.txlSubscribe = function (metadata) {
        if (metadata === void 0) { metadata = {}; }
        var request = new Empty();
        return this.instance.txlSubscribe(request, metadata);
    };
    SpaceClient.prototype.openFile = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new OpenFileRequest();
            var path = payload.path.replace(/^\//, '');
            var bucket = payload.bucket === '' ? null : payload.bucket;
            request.setPath(path);
            request.setBucket(bucket || _this.defaultBucket);
            _this.instance.openFile(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.createBucket = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new CreateBucketRequest();
            request.setSlug(payload.slug);
            _this.instance.createBucket(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.addItems = function (payload, metadata) {
        if (metadata === void 0) { metadata = {}; }
        var request = new AddItemsRequest();
        var targetPath = payload.targetPath.replace(/^\//, '');
        var bucket = payload.bucket === '' ? null : payload.bucket;
        request.setTargetpath(targetPath);
        request.setSourcepathsList(payload.sourcePaths);
        request.setBucket(bucket || this.defaultBucket);
        var stream = this.instance.addItems(request, metadata);
        return stream;
    };
    SpaceClient.prototype.createFolder = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new CreateFolderRequest();
            var path = payload.path.replace(/^\//, '');
            var bucket = payload.bucket === '' ? null : payload.bucket;
            request.setPath(path);
            request.setBucket(bucket || _this.defaultBucket);
            _this.instance.createFolder(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.createUsernameAndEmail = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new CreateUsernameAndEmailRequest();
            request.setEmail(payload.email || '');
            request.setUsername(payload.username);
            _this.instance.createUsernameAndEmail(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.getIdentityByUsername = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new GetIdentityByUsernameRequest();
            request.setUsername(payload.username);
            _this.instance.getIdentityByUsername(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    /**
     * [WIP] shareBucketViaEmail
     *
     * Not supported by space daemon
     */
    SpaceClient.prototype.shareBucketViaEmail = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new ShareBucketViaEmailRequest();
            var bucket = payload.bucket === '' ? null : payload.bucket;
            request.setEmail(payload.email);
            request.setBucket(bucket || _this.defaultBucket);
            _this.instance.shareBucketViaEmail(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.shareBucketViaIdentity = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new ShareBucketViaIdentityRequest();
            var bucket = payload.bucket === '' ? null : payload.bucket;
            request.setIdentitytype(IdentityType[payload.identityType]);
            request.setIdentityvalue(payload.identityValue);
            request.setBucket(bucket || _this.defaultBucket);
            _this.instance.shareBucketViaIdentity(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    /**
     * [WIP] generateFileShareLink
     *
     * Not supported by space daemon
     */
    SpaceClient.prototype.generateFileShareLink = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new GenerateFileShareLinkRequest();
            var bucket = payload.bucket === '' ? null : payload.bucket;
            request.setFilepath(payload.filePath);
            request.setBucket(bucket || _this.defaultBucket);
            _this.instance.generateFileShareLink(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    /**
     * [WIP] backupKeysByPassphrase
     *
     * Not supported by space daemon
     */
    SpaceClient.prototype.backupKeysByPassphrase = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new BackupKeysByPassphraseRequest();
            request.setPassphrase(payload.passphrase);
            _this.instance.backupKeysByPassphrase(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    /**
     * [WIP] recoverKeysByPassphrase
     *
     * Not supported by space daemon
     */
    SpaceClient.prototype.recoverKeysByPassphrase = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new RecoverKeysByPassphraseRequest();
            request.setPassphrase(payload.passphrase);
            _this.instance.recoverKeysByPassphrase(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    /**
     * [WIP] toggleFuseDrive
     *
     * Not supported by space daemon
     */
    SpaceClient.prototype.toggleFuseDrive = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new ToggleFuseRequest();
            request.setMountdrive(payload.mountDrive);
            _this.instance.toggleFuseDrive(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    /**
     * [WIP] getFuseDriveStatus
     *
     * Not supported by space daemon
     */
    SpaceClient.prototype.getFuseDriveStatus = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new Empty();
            _this.instance.getFuseDriveStatus(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.subscribe = function (metadata) {
        if (metadata === void 0) { metadata = {}; }
        var request = new Empty();
        return this.instance.subscribe(request, metadata);
    };
    /**
     * [WIP] listBuckets
     *
     * Not supported by space daemon
     */
    SpaceClient.prototype.listBuckets = function (metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new ListBucketsRequest();
            _this.instance.listBuckets(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.shareBucket = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var request = new ShareBucketRequest();
            var bucket = payload.bucket === '' ? null : payload.bucket;
            request.setBucket(bucket || _this.defaultBucket);
            _this.instance.shareBucket(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    SpaceClient.prototype.joinBucket = function (payload, metadata) {
        var _this = this;
        if (metadata === void 0) { metadata = {}; }
        return new Promise(function (resolve, reject) {
            var threadInfo = new ThreadInfo();
            threadInfo.setKey(payload.threadInfo.key);
            threadInfo.setAddressesList(payload.threadInfo.addresses);
            var request = new JoinBucketRequest();
            var bucket = payload.bucket === '' ? null : payload.bucket;
            request.setThreadinfo(threadInfo);
            request.setBucket(bucket || _this.defaultBucket);
            _this.instance.joinBucket(request, metadata, function (err, res) {
                if (err) {
                    reject(err);
                    return;
                }
                resolve(res);
            });
        });
    };
    return SpaceClient;
}());
export default SpaceClient;
//# sourceMappingURL=client.js.map