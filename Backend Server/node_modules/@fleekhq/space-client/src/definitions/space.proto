syntax = "proto3";


import "google/protobuf/empty.proto";

package space;

option go_package = ".;pb";

//See here for more info about the google.api.http spec: https://github.com/googleapis/googleapis/blob/master/google/api/http.proto#L46

// SpaceApi service
service SpaceApi {
  // Get all folder or files in the default bucket. It fetches all subdirectories too.
  rpc ListDirectories(ListDirectoriesRequest) returns (ListDirectoriesResponse) {

  }

  // Get the folder or files in the path directory.
  // Unlike ListDirectories, this only returns immediate children at path.
  rpc ListDirectory(ListDirectoryRequest) returns (ListDirectoryResponse) {

  }

  // Get Config information installed daemon
  rpc GetConfigInfo(google.protobuf.Empty) returns (ConfigInfoResponse) {

  }

  // Generate Key Pair for current account.
  // This will return error if daemon account already has keypairs
  rpc GenerateKeyPair(GenerateKeyPairRequest) returns (GenerateKeyPairResponse) {

  }

  // Force Generation of KeyPair. This will override existing keys stored in daemon.
  rpc GenerateKeyPairWithForce(GenerateKeyPairRequest) returns (GenerateKeyPairResponse) {

  }

  // Subscribe to file events. This streams responses to the caller
  rpc Subscribe(google.protobuf.Empty) returns (stream FileEventResponse) {

  }

  // Subscribe to textile events. This streams responses to the caller
  rpc TxlSubscribe(google.protobuf.Empty) returns (stream TextileEventResponse) {

  }

  // Open a file in the daemon.
  // Daemon keeps track of all open files and closes them if no activity is noticed after a while
  rpc OpenFile(OpenFileRequest) returns (OpenFileResponse) {

  }

  // Adds items (files/folders) to be uploaded to the bucket.
  rpc AddItems(AddItemsRequest) returns (stream AddItemsResponse) {

  }

  // Creates a folder/directory at the specified path
  rpc CreateFolder(CreateFolderRequest) returns (CreateFolderResponse) {

  }

  // Toggle FUSE drive to be mounted or unmounted
  rpc ToggleFuseDrive(ToggleFuseRequest) returns (FuseDriveResponse) {

  }

  // Get status of FUSE drive. If mounted or unmounted
  rpc GetFuseDriveStatus(google.protobuf.Empty) returns (FuseDriveResponse) {

  }

  // Create a new bucket owned by current user (aka keypair)
  rpc CreateBucket(CreateBucketRequest) returns (CreateBucketResponse) {

  }

  // Get Identity by Username
  rpc GetIdentityByUsername(GetIdentityByUsernameRequest) returns (GetIdentityByUsernameResponse) {

  }

  // Create a new user identity. Username and Email required.
  rpc CreateUsernameAndEmail(CreateUsernameAndEmailRequest) returns (CreateUsernameAndEmailResponse) {

  }

  // Backup Key by Passphrase
  rpc BackupKeysByPassphrase(BackupKeysByPassphraseRequest) returns (BackupKeysByPassphraseResponse) {

  }

  // Recover Keys by Passphrase
  rpc RecoverKeysByPassphrase(RecoverKeysByPassphraseRequest) returns (RecoverKeysByPassphraseResponse) {

  }

  // Share bucket
  rpc ShareBucket(ShareBucketRequest) returns (ShareBucketResponse) {

  }

  // Join bucket
  rpc JoinBucket(JoinBucketRequest) returns (JoinBucketResponse) {

  }

  // Share bucket via email
  rpc ShareBucketViaEmail(ShareBucketViaEmailRequest) returns (ShareBucketViaEmailResponse) {

  }

  // Share bucket via identity information
  rpc ShareBucketViaIdentity(ShareBucketViaIdentityRequest) returns (ShareBucketViaIdentityResponse) {

  }

  // Generate sharing link for file in bucket
  rpc GenerateFileShareLink(GenerateFileShareLinkRequest) returns (GenerateFileShareLinkResponse) {

  }

  rpc ListBuckets(ListBucketsRequest) returns (ListBucketsResponse) {

  }
}

message ListDirectoriesRequest {
  string bucket = 1;
}

message ListDirectoryEntry {
  string path = 1;
  bool isDir = 2;
  string name = 3;
  string sizeInBytes = 4;
  string created = 5;
  string updated = 6;
  string fileExtension = 7;
  string ipfsHash = 8;
}


message ListDirectoriesResponse {
  repeated ListDirectoryEntry entries = 1;
}

message ListDirectoryRequest {
  string path = 1;
  string bucket = 2;
}

message ListDirectoryResponse {
  repeated ListDirectoryEntry entries = 1;
}

message ConfigInfoResponse {
  string port = 1;
  string appPath = 2;
}

message CreateBucketRequest {
  string slug = 1;
}

// TODO: import from textile instead
message Bucket {
  string key = 1;
  string name = 2;
  string path = 3;
  int64 createdAt = 4;
  int64 updatedAt = 5;
}

message CreateBucketResponse {
  Bucket bucket = 1;
}

message GenerateKeyPairRequest {}

message GenerateKeyPairResponse {
  string publicKey = 1;
  string privateKey = 2;
}

enum EventType {
  ENTRY_ADDED = 0;
  ENTRY_DELETED = 1;
  ENTRY_UPDATED = 2;
}

message FileEventResponse {
  EventType type = 1;
  ListDirectoryEntry entry = 2;
}

message TextileEventResponse {
  string bucket = 1;
}

message OpenFileRequest {
  string path = 1;
  string bucket = 2;
}

message OpenFileResponse {
  string location = 1;
}

message AddItemsRequest {
  // full paths to file or Folder on FS. Needs to be a location available to the daemon
  repeated string sourcePaths = 1;
  // target path in bucket.
  string targetPath = 2;
  // The bucket in which to save the item
  string bucket = 3;
}

message AddItemResult {
  string sourcePath= 1;
  string bucketPath = 2;
  string error = 3;
}

message AddItemsResponse {
  AddItemResult result = 1;
  int64 totalFiles = 2;
  int64 totalBytes = 3;
  int64 completedFiles = 4;
  int64 completedBytes = 5;
}

message CreateFolderRequest {
  // target path in bucket to add new empty folder
  string path = 1;
  // The bucket in which to add the folder
  string bucket = 2;
}
// not sure we need to return anything other than an error if we failed
message CreateFolderResponse {
}

message GetIdentityByUsernameRequest {
  string username = 1;
}

message Identity {
  string address = 1;
  string publicKey = 2;
  string username = 3;
}

message GetIdentityByUsernameResponse {
  Identity identity = 1;
}

message CreateUsernameAndEmailRequest {
  string username = 1;
  // Optional. Send "" to skip.
  string email = 2;
}

message CreateUsernameAndEmailResponse {}

message BackupKeysByPassphraseRequest {
  string passphrase = 1;
}

message BackupKeysByPassphraseResponse {}

message RecoverKeysByPassphraseRequest {
  string passphrase = 1;
}

message RecoverKeysByPassphraseResponse {}

message ThreadInfo {
  repeated string addresses = 1;
  string key = 2;
}

message ShareBucketRequest {
  string bucket = 1;
}

message ShareBucketResponse {
  ThreadInfo threadinfo = 1;
}

message JoinBucketRequest {
  ThreadInfo threadinfo = 1;
  string bucket = 2;
}

message JoinBucketResponse {
  bool result = 1;
}

message ShareBucketViaEmailRequest {
  string bucket = 1;
  string email = 2;
}

message ShareBucketViaEmailResponse {}

enum IdentityType {
  USERNAME = 0;
  EMAIL = 1;
}

message ShareBucketViaIdentityRequest {
  // identityType is either USERNAME or EMAIL
  IdentityType identityType = 1;
  // E.g. if identityType is USERNAME, identityValue is the actual username
  string identityValue = 2;
  string bucket = 3;
}

message ShareBucketViaIdentityResponse {}

message GenerateFileShareLinkRequest {
  string bucket = 1;
  string filePath = 2;
}

message GenerateFileShareLinkResponse {
  string link = 1;
}

message ToggleFuseRequest {
  bool mountDrive = 1;
}

message FuseDriveResponse {
  bool fuseDriveMounted = 1;
}

message ListBucketsRequest {}

message ListBucketsResponse {
  repeated Bucket buckets = 1;
}
